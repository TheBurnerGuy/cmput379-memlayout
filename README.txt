In all of the driver programs (with page size = 4096), the first 5 lines are the same. The first line (nil) - 0x8037ffff allocates roughly a gigabyte of data to the kernel read as non-readable memory as well as a offset of space between the end of the kernel space and the text segment. The next line, 0x8048000-0x8048fff, is the ELF file/data segment. The data segment is write protected so the program cannot modify itself. The driver programs are small so they fit in one page of memory. The data segment follows at 0x8049000-0x8049fff and is read-writeable because the initialized variables can change during execution. This is followed by an offset of one read-only memory page. 0x804b000-0x804bfff is the read-writeable BSS segment. The 6th line is  non-readable space between the end of the BSS segment and the beginning of the heap. The 7th line is the space allocated to the heap as read-write memory. The 8th line is the non-readable unmapped memory space between the end of the heap and the memory mapping segment or stack. This is followed by the stack in mem_mod1, and the memory mapping segment and the stack in mem_mod2 and mem_mod3. The stack contains both read/write variables as expected of pointers and variable values.
Besides the crucial memory allocations described below, much of the difference in each region is changes from read/write memory to read-only memory due to the freeing the variables used in get_mem_layout.

2) mem_mod1 uses the sbrk() command to increase the size of the heap. This causes unmapped memory
to be mapped in read-writeable pages. The change is observed in the 2nd line of the difference output which shows the region
has changed from inaccessable to read-writeable.

mem_mod2 uses mmap() to create a 500000 byte anonymous map. This change is observed in the memory mapping area which is located
in the addess space below the stack (shown in the first line of the difference regions). This area has changed from unmapped, unused memory into read-writeable memory pages becaus the PROT_READ and PROT_WRITE arguments are used.

mem_mod3 uses mmap() like mem_mod2 to allocate 5 000 000 bytes of read-writeable memory in the memory mapping segment. It then uses mprotect to write protect the region in the memory mapping segment. This change is seen in the second line of the difference ouput which shows 1220 pages (5 001 215 bytes) of memory in the memory segment have changed from read-writeable to read only.
